#include<bits/stdc++.h>
#define lower(c) (isupper(c) ? (c + 32) : c)

using namespace std;
typedef unsigned long long ull;

double t[59], t1[20], t2[20], w1[59][20]={{2.2,-0.77,-0.04,1.24,.45,-0.17,1.22,.166,-0.98,-0.18,-1.76,2.33,-1.59,.312,.726,1.16,.247,.24,-1.6,2.03},{-25.59,39.74,.007,-25.88,29.25,.082,30.91,.05,-17.53,.234,-13.82,22.85,-42.66,1.53,32.41,33.55,-4.26,-0.25,-69.1,52.08},{45.92,46.22,.065,45.82,-93.65,.14,-45.93,.238,63.95,-0.14,124.03,-75.93,-40.29,-0.57,-8.23,13.19,-37.21,.055,63.32,-105.32},{8.93,-1.49,.07,5.71,-3.47,-0.04,-2.71,.176,5.16,.147,1.54,-1.8,2.13,-0.28,-2.39,6.64,4.5,.009,4.89,-1.2},{14.07,28.45,-0.16,15.02,-52.85,-0.03,-21.07,-0.21,22.13,-0.19,36.31,-26.97,-16.03,-2.36,11.8,-14.55,-25.07,-0.01,19.72,-66.73},{9.36,37.76,.179,27.98,-138.85,-0.25,-52.26,-0.02,5.33,.024,56.85,-41.93,-66.6,-2.47,17.67,15.,-70.38,.04,3.37,-126.73},{12.46,-18.18,-0.19,8.45,25.82,.224,9.4,.138,-5.69,-0.2,-20.65,13.63,5.01,.92,.881,2.16,16.86,-0.26,-33.87,21.19},{-53.91,183.54,-0.25,-51.32,-21.65,.174,51.75,.218,-137.3,.034,171.13,55.33,-252.75,3.08,130.96,-5.82,-173.02,-0.28,-149.04,-41.16},{-1.05,-7.98,-0.04,-5.77,5.49,-0.19,25.11,-0.11,9.92,-0.12,-14.79,10.08,-20.35,2.16,3.57,73.99,12.99,.206,-38.9,28.82},{-50.53,42.22,.065,-11.5,-69.92,-0.04,37.04,.151,-37.03,.217,26.45,30.31,-32.24,2.57,39.08,18.49,-55.62,.262,-72.34,.332},{30.5,-7.9,.234,16.56,-51.99,.263,-27.85,-0.23,50.29,-0.25,21.46,-34.73,34.24,-2.71,-25.64,35.95,35.4,.137,76.81,-2.86},{-26.51,32.93,-0.26,-15.13,10.24,.038,44.13,.074,-43.27,-0.05,27.02,35.87,-28.72,1.67,-15.12,37.61,-10.55,-0.12,-41.85,14.94},{-7.55,-12.02,-0.11,-5.8,81.9,.006,38.92,.016,-48.18,.043,-84.9,55.3,-37.16,3.37,14.57,53.6,22.82,0,-88.36,76.77},{-1.62,19.97,.048,-13.57,-14.32,-0.25,.492,-0.09,13.63,.089,40.62,-5.59,-65.94,.099,13.65,11.6,-11.61,.193,-17.51,-3.04},{-7.39,-11.64,.099,.502,-0.9,.187,-3.17,.249,.466,.237,-2.65,1.06,-0.89,-0.29,4.63,-3.31,10.67,-0.22,-6.48,4.36},{19.07,-40.95,-0.18,-24.15,39.98,.053,5.03,-0.08,20.22,.273,-40.12,6.94,56.47,-0.61,-40.9,-3.34,47.1,.182,14.64,36.84},{-5.55,2.17,-0.02,3.75,-8.43,.087,3.07,.223,-3.26,-0.06,1.84,3.01,5.34,-0.19,-3.76,5.24,-5.85,-0.18,2.09,-20.28},{2.16,-1.31,-0.11,1.74,-1.16,-0.26,.135,-0.02,.088,-0.11,.337,1.16,-1.41,.161,.354,.277,-0.09,-0.23,.088,-0.21},{.043,-1.82,-0.26,1.3,-0.43,.124,-0.81,-0.14,.033,-0.01,-0.74,.885,-0.66,.098,-0.15,-1.23,-1.47,-0.21,.355,-0.26},{2.19,-0.84,-0.11,1.6,-0.58,.116,-0.01,.262,-0.97,-0.11,.013,.796,-0.03,.079,.319,-0.15,.034,.198,-0.32,1.1},{1.52,-0.04,.063,.712,-0.12,.205,.363,.038,.631,-0.05,.691,1.8,.872,.032,.116,1.03,.721,.212,.434,-4.17},{-0.05,.032,-0.24,-0.01,.066,-0.27,-0.1,-0.02,-0.16,.14,.062,-0.15,.13,-0.08,.129,-0.17,-0.03,.043,.062,-0.12},{.068,.233,.073,-0.08,.036,.176,-0.,.192,-0.09,.068,.049,-0.15,.01,.087,-0.01,-0.04,.051,.12,.025,.46},{.75,.665,.078,.22,.104,-0.03,.75,-0.24,.08,.233,-0.27,.657,-0.19,-0.06,.414,.304,.403,.167,-0.05,.548},{.148,-0.06,.093,.475,.027,.173,-0.15,-0.17,-1.69,.255,-0.12,-0.53,.63,-0.17,.545,.358,-0.37,-0.21,.115,.375},{-0.77,.264,-0.19,.192,.16,.049,-0.05,-0.08,.819,-0.27,.022,.141,-0.09,.012,-0.06,-0.29,-0.26,-0.27,.086,.041},{-0.66,-0.32,-0.09,-1.01,.104,-0.26,-0.36,.122,1.53,.221,.124,.097,-0.,-0.45,-0.04,-11.9,.504,-0.01,.187,-0.23},{-0.21,-0.6,.17,1.16,-0.51,-0.02,.169,.146,-0.49,-0.12,-0.23,-0.05,.215,-0.38,-0.84,.303,-0.13,.187,-0.07,.701},{1.78,-0.24,-0.12,-0.57,-0.4,.041,-1.11,.135,.305,-0.25,.146,.986,-0.18,-0.21,.08,-9.45,.45,.05,-0.48,-0.68},{1.,6.27,.076,3.89,-15.45,-0.22,-2.35,.085,-2.32,-0.26,11.67,-7.83,-8.79,.334,-1.23,-2.85,-13.13,.127,5.63,-12.8},{-4.86,15.89,.218,-3.84,-6.19,-0.05,-2.31,-0.08,-11.9,-0.23,4.41,2.94,-2.02,.41,14.15,-18.89,-14.12,-0.12,-3.63,-12.21},{.664,-3.86,.178,3.69,13.95,-0.12,2.22,-0.07,-1.24,.247,-12.45,7.89,6.76,.284,-0.91,-6.19,9.07,.007,-7.04,24.},{-4.27,5.78,.037,.246,.785,-0.23,5.24,-0.14,-12.04,.242,6.99,6.62,-17.53,.205,5.71,-13.89,-7.54,-0.27,-13.97,-6.93},{5.05,-5.22,-0.03,2.2,-7.83,.003,-8.95,.268,-1.05,-0.29,-0.13,-2.71,-8.56,-0.09,3.95,-2.02,1.23,.22,4.78,-10.08},{11.68,28.32,-0.14,-10.3,-74.29,.094,3.08,-0.1,-11.66,-0.19,22.82,-3.66,-24.56,-0.18,7.94,20.26,-33.26,-0.09,19.55,-36.87},{13.87,-8.86,.182,-0.94,2.77,.211,9.03,.153,4.9,-0.04,-11.35,6.,2.9,-0.07,-5.75,18.8,25.14,-0.1,-0.29,33.8},{.914,8.41,.036,-1.05,13.16,-0.11,-2.74,-0.01,5.61,.233,-3.55,-2.32,-1.73,.23,-0.66,5.71,-9.89,-0.16,1.4,2.89},{11.43,-14.26,.003,3.59,10.46,.133,-6.06,.103,15.76,.101,-12.03,-1.,11.57,-0.58,-6.41,6.16,22.79,-0.29,-0.6,4.48},{6.29,-8.31,.133,8.92,4.09,-0.09,1.13,-0.16,-3.82,-0.13,-16.38,4.39,-1.26,-0.37,-9.7,-1.11,16.08,-0.29,-4.44,16.36},{-6.72,30.32,-0.05,-8.73,-30.55,-0.22,32.6,-0.12,-4.18,-0.09,27.89,3.46,-34.31,1.14,14.9,-7.69,-28.53,-0.,-10.79,.707},{10.25,-14.99,-0.2,-6.63,7.02,-0.25,5.4,-0.25,-1.01,.189,-9.54,6.53,8.16,.057,-2.31,.57,9.61,-0.1,-2.38,19.46},{-0.35,8.6,.087,-3.03,-5.32,-0.,4.8,-0.04,-0.14,.169,-7.11,6.03,-3.76,-0.04,8.59,-1.39,1.6,.214,-5.72,-4.62},{6.94,-5.88,.222,-6.72,5.39,.265,8.27,-0.1,-2.3,.099,7.25,4.82,-0.3,-0.49,7.64,.639,-4.27,.036,-1.03,-5.53},{-0.15,-11.66,-0.07,3.19,1.12,.191,-5.76,.262,3.06,.177,-1.78,-4.15,6.07,-0.12,-6.3,-0.7,-1.01,-0.26,9.04,-1.4},{.908,3.96,.139,-4.62,-6.03,-0.2,-5.2,.139,-2.36,-0.13,17.93,-3.18,-3.41,-0.65,1.7,10.95,-22.18,-0.03,5.67,-26.36},{46.12,-17.03,-0.08,23.18,-27.24,.206,-12.39,-0.,36.68,-0.02,16.81,-30.96,3.3,-0.27,-36.56,-0.11,1.78,-0.16,38.57,-24.11},{-1.88,-6.4,-0.05,3.58,6.4,.028,5.8,-0.18,-8.95,-0.14,-25.02,9.97,6.56,.773,-4.69,9.41,4.02,-0.16,-15.25,23.94},{1.1,13.45,.225,1.85,-4.3,-0.11,9.24,-0.24,.791,.147,10.89,6.7,-12.25,.189,12.,-7.41,-1.98,.094,-9.31,-1.94},{-6.87,-9.95,.156,4.97,-1.25,.243,-4.91,.021,-6.98,.191,-12.22,3.9,.855,-0.01,-11.24,12.54,8.03,-0.27,-7.42,-1.38},{2.21,17.67,-0.09,-1.17,-13.59,.26,-1.49,-0.05,3.38,.053,22.63,-3.69,2.97,-0.1,3.31,2.13,4.06,-0.24,4.92,-22.98},{70.48,-91.17,.164,61.91,.141,.036,-29.11,-0.06,66.,-0.22,-63.62,-44.47,100.97,-0.87,-86.7,-34.45,98.91,-0.27,55.58,-6.74},{-1.91,4.54,.032,-8.33,13.61,-0.06,9.48,-0.09,-9.19,-0.02,1.99,10.28,4.85,.403,8.69,1.61,-9.9,.139,-9.81,12.68},{35.7,-38.69,-0.17,10.85,27.25,.212,15.89,-0.04,-7.92,.037,-98.09,18.24,23.18,-0.08,-11.23,-3.16,35.82,.094,-33.26,12.95},{2.97,-8.56,.225,5.26,.613,-0.16,-5.32,.039,9.42,-0.21,-10.48,-1.44,-2.52,.084,-9.8,8.22,5.76,.208,5.21,4.09},{-0.37,1.64,.201,5.46,17.46,-0.23,3.01,.261,-6.76,-0.11,-16.48,12.32,2.16,.545,4.47,4.25,-4.21,-0.03,-5.64,22.75},{-0.06,.005,-0.09,-0.09,-0.02,-0.09,.025,-0.13,.035,-0.23,-0.02,-0.04,-0.02,.004,-0.01,.033,-0.04,-0.16,-0.,-0.09},{.233,-0.29,.235,.177,-0.05,.077,-0.48,-0.01,-0.22,.156,.06,-0.03,-0.02,-0.03,-0.11,.03,.119,.209,-0.09,.737},{1.25,2.17,-0.02,.802,1.24,.244,1.67,-0.19,.101,-0.07,.256,.879,.95,-0.21,-1.37,-1.35,.581,-0.03,1.08,-1.97},{-1.45,-34.46,-0.06,.243,14.66,-0.27,-13.65,-0.26,.221,-0.26,-24.6,9.48,23.38,-1.,-12.07,27.35,27.84,.171,-0.9,32.43}}, b1[20]={3.09,.156,0,1.603,-1.115,0,1.15,0,-0.559,-0.017,.012,2.229,-1.902,.081,1.283,3.034,.18,-0.028,-2.07,.933}, w2[20][3]={{.04,.422,.42},{.418,.282,.138},{.225,.425,-0.243},{-0.11,.268,.232},{.346,-0.46,.053},{.47,.142,-0.135},{.075,-0.254,.005},{-0.16,.265,-0.249},{-0.057,.173,.152},{.284,-0.46,-0.158},{-0.25,.224,-0.37},{.414,.05,.092},{-0.164,.254,.407},{.172,.141,.141},{.229,.075,-0.022},{.43,.106,-0.276},{-0.476,-0.232,-0.079},{.164,-0.174,-0.041},{-0.696,.482,.4},{.152,.062,.121}}, b2[3]={4.409,-1.732,-1.38};

constexpr int P = 1e6 + 7, MOD = 1e9 + 7;

double avg(vector<int> &v){
    double r = 0;
    for (int y : v){
        r += y;
    }
    return r / v.size();
}

double sqd(vector<int> &v, double &x){
    double r = 0;
    for (int y : v){
        r += pow((y-x), 2);
    }
    return sqrt(r / v.size());
}

void pcs(const string &s){
    fill(t, t+58, 0);
    t[55] = s.size() - 3;
    unordered_map<int, int> whs;
    t[56] = 0;
    t[57] = 0;
    int uc = 0, uw = 0, wl = 0, sc = 0, sw = 0, wh = 0;
    vector<int> ucs, uws, scs, sws, wls;
    for (int i = 0; i < t[55] + 1; i++){
        char c = s[i];
        bool pw = 1; 
        bool ps = 0;
        if (isalpha(c)){
            t[0]++;
            t[lower(c) - 'a' + 29]++;
            pw = 0;
            wl++;
            wh = ((ull)P * wh + lower(c)) % MOD;
            if (isupper(c)){
                t[1]++;
                ucs.push_back(uc);
                uws.push_back(uw);
                uc = uw = 0;
            }
            if (lower(c) == 'u'){
                if (lower(s[i+1]) == 's') t[58]++;
            }
        }
        else if (isdigit(c)) t[2]++;
        else if (c==' ') t[3]++;
        else if (c=='.'){
            ps = 1;
            t[4]++;
            if (s[i+1] == '.' and s[i+2] == '.') t[5]++;
        }
        else if (c==',') t[6]++;
        else if (c == ';') t[7]++;
        else if (c == ':') t[8]++;
        else if (c == '"') t[9]++;
        else if (c == '-') t[10]++;
        else if (c == '?'){
            t[11]++;
            ps=1;
        } else if (c == '!'){
            t[12]++;
            ps=1;
        } else if (c=='^') ps=1;
        sc++; uc++;

        if (pw and wl){
            t[56]++;
            if (wh == 325955471)
                t[13]++;
            else if (wh == 105)
                t[14]++;
            else if (wh == 992934780)
                t[15]++;
            else if (wh == 97)
                t[16]++;
            uw++; sw++;
            wls.push_back(wl);
            whs[wh]++;
            wl = wh = 0;
        }
        if (ps and sw){
            t[57]++;
            scs.push_back(sc);
            sws.push_back(sw);
            sc = sw = 0;
        }
    }
    t[17] = whs.size();
    for (auto &xd : whs)
        t[18] += (xd.second == 1 ? 1 : 0);
    t[19] = avg(wls);
    t[20] = sqd(wls, t[19]);
    t[21] = avg(scs);
    t[22] = sqd(scs, t[21]);
    t[23] = avg(sws);
    t[24] = sqd(sws, t[23]);
    if (ucs.size()){
        t[25] = avg(ucs);
        t[26] = sqd(ucs, t[25]);
    } else {
        t[25] = t[26] = 0;
    }
    if (uws.size()){
        t[27] = avg(uws);
        t[28] = sqd(uws, t[27]);
    } else {
        t[27] = t[28] = 0;
    }
    for (int i = 0; i < 13; i++) t[i] /= t[55];
    for (int i = 29; i < 55; i++) t[i] /= t[55];
    for (int i = 13; i < 19; i++) t[i] /= t[56];
    t[58] /= t[56];
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int q;
    cin >> q;
    string s;
    cin.ignore();
    while (q--){
        getline(cin, s);
        s = s + "^^^";
        pcs(s);
        for (int i = 0; i < 20; i++){
            t1[i] = 0;
            for (int j = 0; j < 59; j++){
                t1[i] += w1[j][i]*t[j];
            }
            t1[i] += b1[i];
            t1[i] = max(t1[i], 0.);
        }
        for (int i = 0; i < 3; i++){
            t2[i] = 0;
            for (int j = 0; j < 20; j++){
                t2[i] += w2[j][i]*t1[j];
            }
            t2[i] += b2[i];
        }
        double mx = t2[0];
        int mi = 0;
        for (int i = 1; i < 3; i++){
            if(t2[i] > mx){
                mx = t2[i];
                mi = i;
            }
        }
        switch (mi)
        {
        case 0:
            cout << "Mickiewicz\n";
            break;
        case 1:
            cout << "Prus\n";
            break;
        case 2:
            cout << "Sienkiewicz\n";
            break;
        }
    }
    return 0;
}
